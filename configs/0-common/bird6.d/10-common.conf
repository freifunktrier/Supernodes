define ownas = 65022;

table ibgp; # internal BGP peerings
table ebgp; # external (icvpn) BGP peerings
table freifunk; # kernel table 42 for routing from ff network
### functions ###

# own network
function is_self_net() {
    return (net ~ [ fdca:ffee:fc0f::/64+, 2001:bf7:fc00::/44+ ]);
}

# freifunk ip ranges in general
function is_freifunk() {
  return net ~ [
	fc00::/7{48,64},
	2001:bf7::/32+, #Foerderverein Freie Netzwerke e.V.
	2001:67c:2d50::/48+, #Freifunk Luebeck
	2a03:2267::/32+, #Freifunk Community Hamburg
	2001:4dd0:ff00:9d18::/64+, #Freifunk Giessen
	2a03:2260::/30+ #Freifunk Rheinland
  ];
}

### kernel ###

# synchronize from bird to main kernel routing table
# nothing in the other direction
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
};
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
    kernel table 10;
    table freifunk;
};

# this pseudo-protocol watches all interface up/down events
protocol device {
    scan time 10;
};

### pipes ###

# sync nothing from main routing table to ebgp
# sync routes (not own network) from ebgp to main routing table
protocol pipe p_maintbl {
    peer table ebgp;
    import where !is_self_net() && is_freifunk();
    export none;
};

# sync routes (not own network) from ebgp to ibgp
# sync routes (all) from ibgp to ebgp
protocol pipe p_ibgptbl {
  table ebgp;
  peer table ibgp;
  import all;
  export where !is_self_net();
};

# sync routes (freifunk, dn42 and chaosvpn) from ibgp to freifunk
# sync nothing from freifunk to ibgp
protocol pipe p_freitbl {
  table ibgp;
  peer table freifunk;
  import none;
  export all;
};

### static routes ###
#protocol static static_fftr {  
#  route fdca:ffee:fc0f::/64 via "br-fftr";
#  table ibgp;
#};

protocol static static_fftr_pubip {
  route 2001:bf7:fc0f:0::/64 via "br-fftr";
  table ibgp;
}

protocol static static_fftr_pubseg_01 {
  route 2001:bf7:fc0f:1::/64 via "br-fftr_01";
  table ibgp;
}
protocol static static_fftr_pubseg_02 {
  route 2001:bf7:fc0f:2::/64 via "br-fftr_02";
  table ibgp;
}
protocol static static_fftr_pubseg_03 {
  route 2001:bf7:fc0f:3::/64 via "br-fftr_03";
  table ibgp;
}
protocol static static_fftr_pubseg_04 {
  route 2001:bf7:fc0f:4::/64 via "br-fftr_04";
  table ibgp;
}
protocol static static_fftr_pubseg_05 {
  route 2001:bf7:fc0f:5::/64 via "br-fftr_05";
  table ibgp;
}


### templates ###

# template for same city freifunk gateways
template bgp locals {
  table ibgp;
  local as ownas;
  import filter {
    preference = 99;
    accept;
  };
  export where source = RTS_BGP;
  direct;
  next hop self;
};

roa table icvpn_roa {
  include "roa6.con";
}

# filter used for non-uplink peers
filter icvpn_untrusted {
  if(is_self_net()) then {
    print net, " ASN ", bgp_path.last," failed is_self_net";
    reject;
  }
  if net.len > 64 then {
    print net, " ASN ", bgp_path.last," failed min prefix length 64";
    reject;
  }
  if(!is_freifunk()) then {
    print net, " ASN ", bgp_path.last," failed is_freifunk";
    reject;
  }
  if roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID then {
    print "ROA check failed for ", net, " ASN ", bgp_path.last;
    reject;
  }
  accept;
}

#filter to make AS-Path longer to make other peers prefer other routes
filter only_freifunk {
  if(!is_freifunk()) then {
    reject;
  }
# bgp_path.prepend(65022); #traffic off marker
  accept;
}

# template for icvpn gateways of other cities
template bgp peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import filter icvpn_untrusted;
  export filter only_freifunk;
  route limit 10000;
};

# template for (icvpn/direct) gateways that are allowed to supply our uplink
template bgp uplink_peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import where !is_self_net(); #yes, we import EVERYTHING not routing to our net
  export filter only_freifunk;
  route limit 1000000; # sometimes a fulltables comes along and we do not want to disconnect just because of that
  disabled on; #do not establish connection to ICVPN-Hosts, because they cause loops
};

# template for prefered icvpn/direct uplink gateway
template bgp prefered_uplink_peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import where !is_self_net();

  import filter {
	if is_self_net() then {
		reject;
	}

	if net = ::/0 then {
		preference = 200;
	}

	accept;
  };
  export filter only_freifunk;
  route limit 1000000; # sometimes a fulltables comes along and we do not want to disconnect just because of that
  disabled on; #do not establish connection to ICVPN-Hosts, because they cause loops
};
