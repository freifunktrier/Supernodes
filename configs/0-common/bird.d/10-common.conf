define ownas = 65022;

table ibgp; # internal BGP peerings
table ebgp; # external (icvpn) BGP peerings
table freifunk; # kernel table 42 for routing from ff network
### functions ###

# own network
function is_self_net() {
    return (net ~ [ 10.172.0.0/16+ ]);
}

# freifunk ip ranges in general
function is_freifunk() {
  return net ~ [ 10.0.0.0/8+,
    172.16.0.0/12+
#    104.0.0.0/8+
  ];
}

### kernel ###

# synchronize from bird to main kernel routing table
# nothing in the other direction
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
};
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
    kernel table 10;
    table freifunk;
};

# this pseudo-protocol watches all interface up/down events
protocol device {
    scan time 10;
};

### pipes ###

# sync nothing from main routing table to ebgp
# sync routes (not own network) from ebgp to main routing table
protocol pipe p_maintbl {
    peer table ebgp;
    import where !is_self_net() && is_freifunk();
    export none;
};

# sync routes (not own network) from ebgp to ibgp
# sync routes (all) from ibgp to ebgp
protocol pipe p_ibgptbl {
  table ebgp;
  peer table ibgp;
  import all;
  export where !is_self_net();
};

# sync routes (freifunk, dn42 and chaosvpn) from ibgp to freifunk
# sync nothing from freifunk to ibgp
protocol pipe p_freitbl {
  table ibgp;
  peer table freifunk;
  import none;
  export all;
};

### static routes ###
#protocol static static_fftr {  
#  route 10.172.0.0/16 via "br-fftr";
#  table ibgp;
#};

protocol static static_fftr {  
  route 10.172.240.0/20 via "br-fftr";
  table ibgp;
};

protocol static static_fftr_01 {  
  route 10.172.0.0/20 via "br-fftr_01";
  table ibgp;
};

protocol static static_fftr_02 {  
  route 10.172.16.0/20 via "br-fftr_02";
  table ibgp;
};

protocol static static_fftr_03 {  
  route 10.172.32.0/20 via "br-fftr_03";
  table ibgp;
};

protocol static static_fftr_04 {  
  route 10.172.48.0/20 via "br-fftr_04";
  table ibgp;
};

protocol static static_fftr_05 {  
  route 10.172.64.0/20 via "br-fftr_05";
  table ibgp;
};


### templates ###

# template for same city freifunk gateways
template bgp locals {
  table ibgp;
  local as ownas;
  import filter {
    preference = 99;
    accept;
  };
  export where source = RTS_BGP;
  direct;
  next hop self;
};

roa table icvpn_roa {
  include "roa4.con";
}

# filter used for non-uplink peers
filter icvpn_untrusted {
  if(is_self_net()) then {
    print net, " ASN ", bgp_path.last," failed is_self_net";
    reject;
  }
  if(!is_freifunk()) then {
    print net, " ASN ", bgp_path.last," failed is_freifunk";
    reject;
  }
  if roa_check(icvpn_roa, net, bgp_path.last) = ROA_INVALID then {
    print "ROA check failed for ", net, " ASN ", bgp_path.last;
    reject;
  }
  accept;
}

#filter to make AS-Path longer to make other peers prefer other routes
filter only_freifunk {
  if(!is_freifunk()) then {
    reject;
  }
# bgp_path.prepend(65022); #traffic off marker
  accept;
}

# template for icvpn gateways of other cities
template bgp peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import filter icvpn_untrusted;
  export filter only_freifunk;
  route limit 10000;
};

# template for icvpn gateways that are allowed to supply our uplink
template bgp uplink_peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import where !is_self_net();
  export filter only_freifunk;
  route limit 100000;  # # Routlimit of announced routes we get from Berlin
};

# template for prefered icvpn uplink gateway
template bgp prefered_uplink_peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import where !is_self_net();

  import filter {
	if is_self_net() then {
		reject;
	}

	if net = 0.0.0.0/0 then {
		preference = 200;
	}

	accept;
  };
  export filter only_freifunk;
  route limit 10000;
};
