# baldur will be our primary DHCP-Server
# glubit will be the secondary DHCP-Server
# it will announce one Subnet per Segment
# it will not announce the first 255 addresses of any segement

# needs on primary and secondary to have the firewall open port 647/tcp to each other !!!

# Wir haben uns entschlossen, kein primary-Zeugs zu machen, um eine mögliche Fehlerquelle auszuschließen.
# Jeder DHCP bekommt einfach eine genügend große IP-Range

#failover peer "fftr" {
  #primary;
  #address 10.172.0.14;       # baldur
  #peer address 10.172.0.16;  # glubit
  #max-response-delay 60;
  #max-unacked-updates 10;
  #mclt 600;
  #split	128;
  #load balance max seconds 3;
#}

option domain-name "fftr";
default-lease-time 600;
max-lease-time 3600;
#log-facility local7;
#if (packet(24, 4) != 00:00:00:00) {
#    set last_giaddr = packet(24, 4);
#}

# Segment_00 ; für den Übergang: das letzte Teilnetz reservieren
subnet 10.172.240.0 netmask 255.255.240.0 {
   authoritative;
   pool {
#     failover peer "fftr";
     range 10.172.241.0 10.172.255.254;
   }
   option domain-name-servers 10.172.240.14, 10.172.240.16;
   option routers 10.172.240.14;
#    if (packet(24, 4) != 00:00:00:00) {
#        option routers = packet(24, 4);
#        option domain-name-servers = packet(24, 4);
#        option dhcp-server-identifier = packet(24, 4);
#    }
}


# Segment_01
subnet 10.172.0.0 netmask 255.255.240.0 {
   authoritative;
   pool {
     failover peer "fftr";
     range 10.172.1.0 10.172.15.254;
   }
   option domain-name-servers 10.172.0.14, 10.172.0.16;
   option routers 10.172.0.14;
#    if (packet(24, 4) != 00:00:00:00) {
#        option routers = packet(24, 4);
#        option domain-name-servers = packet(24, 4);
#        option dhcp-server-identifier = packet(24, 4);
#    }
}

# Segment_02
subnet 10.172.16.0 netmask 255.255.240.0 {
   authoritative;
   pool {
     failover peer "fftr";
     range 10.172.17.0 10.172.31.254;
   }
   option domain-name-servers 10.172.16.14, 10.172.16.16;
   option routers 10.172.16.14;
#    if (packet(24, 4) != 00:00:00:00) {
#        option routers = packet(24, 4);
#        option domain-name-servers = packet(24, 4);
#        option dhcp-server-identifier = packet(24, 4);
#    }
}
#segment_03
subnet 10.172.32.0 netmask 255.255.240.0 {
   authoritative;
   pool {
     failover peer "fftr";
     range 10.172.33.0 10.172.47.254;
   }
   option domain-name-servers 10.172.32.14, 10.172.32.16;
   option routers 10.172.32.14;
    if (packet(24, 4) != 00:00:00:00) {
        option routers = packet(24, 4);
        option domain-name-servers = packet(24, 4);
        option dhcp-server-identifier = packet(24, 4);
    }
}
#segment_04
subnet 10.172.48.0 netmask 255.255.240.0 {
   authoritative;
   pool {
     failover peer "fftr";
     range 10.172.49.0 10.172.63.254;
   }
   option domain-name-servers 10.172.48.14, 10.172.48.16;
   option routers 10.172.48.14;
#    if (packet(24, 4) != 00:00:00:00) {
#        option routers = packet(24, 4);
#        option domain-name-servers = packet(24, 4);
#        option dhcp-server-identifier = packet(24, 4);
#    }
}

#segment_05
subnet 10.172.64.0 netmask 255.255.240.0 {
   authoritative;
   pool {
     failover peer "fftr";
     range 10.172.65.0 10.172.79.254;
   }
   option domain-name-servers 10.172.64.14, 10.172.64.16;
   option routers 10.172.64.14;
#    if (packet(24, 4) != 00:00:00:00) {
#        option routers = packet(24, 4);
#        option domain-name-servers = packet(24, 4);
#        option dhcp-server-identifier = packet(24, 4);
#    }
}

include "/etc/dhcp/static.conf";
