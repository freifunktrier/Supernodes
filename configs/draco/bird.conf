router id 10.207.0.220;
define ownip = 10.172.0.11;
define ownas = 65022;

table ibgp; # internal BGP peerings
table ebgp; # external (icvpn) BGP peerings
table freifunk; # kernel table 42 for routing from ff network
### functions ###

# own network
function is_self_net() {
    return (net ~ [ 10.172.0.0/16+ ]);
}

# freifunk ip ranges in general
function is_freifunk() {
  return net ~ [ 10.0.0.0/8+,
    172.16.0.0/12+
#    104.0.0.0/8+
  ];
}

### kernel ###

# synchronize from bird to main kernel routing table
# nothing in the other direction
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
};
protocol kernel {
    scan time 10;
    import none;
    export filter {
        krt_prefsrc = ownip;
        accept;
    };
    kernel table 10;
    table freifunk;
};

# this pseudo-protocol watches all interface up/down events
protocol device {
    scan time 10;
};

### pipes ###

# sync nothing from main routing table to ebgp
# sync routes (not own network) from ebgp to main routing table
protocol pipe p_maintbl {
    peer table ebgp;
    import where !is_self_net();
    export none;
};

# sync routes (not own network) from ebgp to ibgp
# sync routes (all) from ibgp to ebgp
protocol pipe p_ibgptbl {
  table ebgp;
  peer table ibgp;
  import all;
  export where !is_self_net();
};

# sync routes (freifunk, dn42 and chaosvpn) from ibgp to freifunk
# sync nothing from freifunk to ibgp
protocol pipe p_freitbl {
  table ibgp;
  peer table freifunk;
  import none;
  export where is_freifunk();
};

### static routes ###

# if no openvpn is running, reject everything we do not have a route for
#protocol static unreachable_default {
#  route 0.0.0.0/0 reject;
#  table freifunk;
#};

protocol static static_fftr {  
  route 10.172.0.0/16 reject;
  table ebgp;
};

# in hamburg we use a /18 from our /16 in the mesh
# create a route for that in freifunk table
protocol static local_fftr {
  route 10.172.0.0/16 via "br-fftr";
  table freifunk;
};

### templates ###

# template for same city freifunk gateways
template bgp locals {
  table ibgp;
  local as ownas;
  import filter {
    preference = 99;
    accept;
  };
  export where source = RTS_BGP;
  direct;
  next hop self;
};

# template for icvpn gateways of other cities
template bgp peers {
  table ebgp;
  local as ownas;
  # ignore routes for our own network
  import where (is_freifunk() && !is_self_net());
  export where is_freifunk();
  route limit 10000;
};

### additional configuration  ###

include "/etc/bird/bird.d/*";
